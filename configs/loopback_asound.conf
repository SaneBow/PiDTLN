# The IPC key of dmix or dsnoop plugin must be unique
# If 555555 or 666666 is used by other processes, use another one


# use samplerate to resample as speexdsp resample is bad
defaults.pcm.rate_converter "samplerate"

pcm.!default {
    type asym
    playback.pcm "playback"
    capture.pcm "capture"
}

pcm.playback {
    type plug
    slave.pcm "dmixed"
}

pcm.capture {
    type plug
    slave.pcm "array"
}

pcm.dmixed {
    type dmix
    slave.pcm "hw:seeed2micvoicec"
    ipc_key 555555 
}

pcm.array {
    type dsnoop
    slave {
        pcm "hw:seeed2micvoicec"
        channels 2
    }
    ipc_key 666666
}

# audio play to this device will be duplicated to hw (stereo) and loopback (mono)
pcm.mplaydev {
  type route
  slave.pcm {
    type multi
    slaves.a.pcm "plughw:seeed2micvoicec"
    slaves.a.channels 2
    slaves.b.pcm "hw:Loopback,0,4"  # loopback null sink
    slaves.b.channels 1
    bindings.0.slave a
    bindings.0.channel 0
    bindings.1.slave a
    bindings.1.channel 1
    bindings.2.slave b
    bindings.2.channel 0
  }
  slave.channels 3
  ttable.0.0 1;
  ttable.1.1 1;
  ttable.0.2 0.5;
  ttable.1.2 0.5;
}

# combine mic (ch 0) and loopback (ch 1) to single recording
pcm.mrecdev {
  type route
  slave.pcm {
    type multi
    slaves.a.pcm "hw:seeed2micvoicec"
    slaves.a.channels 2
    slaves.b.pcm "hw:Loopback,1,4"  # loopback capturing interface
    slaves.b.channels 1
    bindings.0.slave a
    bindings.0.channel 0
    bindings.1.slave a
    bindings.1.channel 1
    bindings.2.slave b
    bindings.2.channel 0
  }
  slave.channels 3
  ttable.0.0 0.5
  ttable.0.1 0.5
  ttable.1.2 1
}

pcm.aec_proc {
  type asym
  playback.pcm "plug:mplaydev"
  capture.pcm "mrecdev"
}

